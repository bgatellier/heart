# Strategy
#
# 2 modes: simulate and publish
# - simulate: pachages versions numbers bump and npmj.com publication are simulated in the workflow
# - publication: a release branch is created that contains packages versions bumps and updated changelogs
#
# As we are using Rush version policies feature, we need to bump versions first:
# https://rushjs.io/pages/maintainer/publishing/#publishing-process-when-version-policies-are-used

name: üöÄ Publish packages

on:
  workflow_dispatch:
    inputs:
      MODE:
        description: Publication mode
        type: choice
        options:
          # Simulate the publication
          - simulate
          # Do the publication
          - publish
        default: simulate
        required: true
      VERSION_POLICY:
        description: Indicates how to increment packages version number
        type: choice
        options:
          # Increments according to their own minor or patch increment (depends of the type of changes made to each package)
          - individualVersion
          # Increments to the same major version. Use only for major releases.
          - lockStepVersion
        default: "individualVersion"
        required: true

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      MODE: ${{ inputs.MODE }}
      SOURCE_BRANCH: master # Force the master branch to be deployed: avoid the publication of WIP code from other branches
      TARGET_BRANCH: release/${{ github.run_id }}
      VERSION_POLICY: ${{ inputs.VERSION_POLICY }}
    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
          ref: ${{ env.SOURCE_BRANCH }}

      - uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc

      - name: Git config user
        uses: snow-actions/git-config-user@v1.0.0
        with:
          name: Heart
          email: heart@fabernovel.com

      # simulate mode

      - name: Simulate packages versions numbers bump
        if: ${{ env.MODE == 'simulate' }}
        run: node common/scripts/install-run-rush.js version --bump --version-policy $VERSION_POLICY

      - name: Simulate a publication to npmjs.org with the version policy ${{ env.VERSION_POLICY }}
        if: ${{ env.MODE == 'simulate' }}
        run: node common/scripts/install-run-rush.js publish --include-all --target-branch $TARGET_BRANCH --version-policy $VERSION_POLICY

      # publish mode

      - name: Install
        if: ${{ env.MODE == 'publish' }}
        run: node common/scripts/install-run-rush.js install

      - name: üèó Build
        if: ${{ env.MODE == 'publish' }}
        run: node common/scripts/install-run-rush.js rebuild

      - name: Create origin/${{ env.TARGET_BRANCH }} branch
        if: ${{ env.MODE == 'publish' }}
        run: |
          git checkout -b $TARGET_BRANCH
          git push origin $TARGET_BRANCH
          git checkout $SOURCE_BRANCH

      - name: Bump packages versions numbers
        if: ${{ env.MODE == 'publish' }}
        run: node common/scripts/install-run-rush.js version --bump --target-branch $TARGET_BRANCH --version-policy $VERSION_POLICY

      - name: Publish to npmjs.org with the version policy ${{ env.VERSION_POLICY }}
        if: ${{ env.MODE == 'publish' }}
        run: node common/scripts/install-run-rush.js publish --include-all --target-branch $TARGET_BRANCH --version-policy $VERSION_POLICY --publish

      - name: Create a Pull Request
        if: ${{ env.MODE == 'publish' }}
        run: gh pr create --base $SOURCE_BRANCH --head $TARGET_BRANCH --fill --no-maintainer-edit
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # We use a PAT (Personal Access Token) to do the following operations on the PR, as $GITHUB_TOKEN cannot review his own PR and cannot enforce repository settings.
      # We use a merge commit to preserve Git tags added by the previous step and move them to the $TARGET_BRANCH.
      # To make the merge commit work (--merge option), the "Allow merge commits" option must be checked in the repository settings.
      # As the "Require linear history" option of the $SOURCE_BRANCH protected branch is on, we enforce this setting with the --admin flag.
      - name: Review and merge the Pull Request, then delete the branch
        if: ${{ env.MODE == 'publish' }}
        run: |
          gh pr review $TARGET_BRANCH --approve
          gh pr merge $TARGET_BRANCH --merge --admin --delete-branch
        env:
          GH_TOKEN: ${{ secrets.BGATELLIER_PAT }}
